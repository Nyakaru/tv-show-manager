module.exports = {
  // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  typeDefs:
    // Please don't change this file manually but run `prisma generate` to update it.
    // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

    /* GraphQL */ `
      type AggregateSchedule {
        count: Int!
      }

      type AggregateUser {
        count: Int!
      }

      type AggregateWatched {
        count: Int!
      }

      type BatchPayload {
        count: Long!
      }

      scalar Long

      type Mutation {
        createSchedule(data: ScheduleCreateInput!): Schedule!
        updateSchedule(
          data: ScheduleUpdateInput!
          where: ScheduleWhereUniqueInput!
        ): Schedule
        updateManySchedules(
          data: ScheduleUpdateManyMutationInput!
          where: ScheduleWhereInput
        ): BatchPayload!
        upsertSchedule(
          where: ScheduleWhereUniqueInput!
          create: ScheduleCreateInput!
          update: ScheduleUpdateInput!
        ): Schedule!
        deleteSchedule(where: ScheduleWhereUniqueInput!): Schedule
        deleteManySchedules(where: ScheduleWhereInput): BatchPayload!
        createUser(data: UserCreateInput!): User!
        updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
        updateManyUsers(
          data: UserUpdateManyMutationInput!
          where: UserWhereInput
        ): BatchPayload!
        upsertUser(
          where: UserWhereUniqueInput!
          create: UserCreateInput!
          update: UserUpdateInput!
        ): User!
        deleteUser(where: UserWhereUniqueInput!): User
        deleteManyUsers(where: UserWhereInput): BatchPayload!
        createWatched(data: WatchedCreateInput!): Watched!
        updateWatched(
          data: WatchedUpdateInput!
          where: WatchedWhereUniqueInput!
        ): Watched
        updateManyWatcheds(
          data: WatchedUpdateManyMutationInput!
          where: WatchedWhereInput
        ): BatchPayload!
        upsertWatched(
          where: WatchedWhereUniqueInput!
          create: WatchedCreateInput!
          update: WatchedUpdateInput!
        ): Watched!
        deleteWatched(where: WatchedWhereUniqueInput!): Watched
        deleteManyWatcheds(where: WatchedWhereInput): BatchPayload!
      }

      enum MutationType {
        CREATED
        UPDATED
        DELETED
      }

      interface Node {
        id: ID!
      }

      type PageInfo {
        hasNextPage: Boolean!
        hasPreviousPage: Boolean!
        startCursor: String
        endCursor: String
      }

      type Query {
        schedule(where: ScheduleWhereUniqueInput!): Schedule
        schedules(
          where: ScheduleWhereInput
          orderBy: ScheduleOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Schedule]!
        schedulesConnection(
          where: ScheduleWhereInput
          orderBy: ScheduleOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): ScheduleConnection!
        user(where: UserWhereUniqueInput!): User
        users(
          where: UserWhereInput
          orderBy: UserOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [User]!
        usersConnection(
          where: UserWhereInput
          orderBy: UserOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): UserConnection!
        watched(where: WatchedWhereUniqueInput!): Watched
        watcheds(
          where: WatchedWhereInput
          orderBy: WatchedOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Watched]!
        watchedsConnection(
          where: WatchedWhereInput
          orderBy: WatchedOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): WatchedConnection!
        node(id: ID!): Node
      }

      type Schedule {
        id: ID!
        name: String
        summary: String
        url: String
        image: String
        rating: Float
        user: User
      }

      type ScheduleConnection {
        pageInfo: PageInfo!
        edges: [ScheduleEdge]!
        aggregate: AggregateSchedule!
      }

      input ScheduleCreateInput {
        id: ID
        name: String
        summary: String
        url: String
        image: String
        rating: Float
        user: UserCreateOneWithoutScheduleInput
      }

      input ScheduleCreateManyWithoutUserInput {
        create: [ScheduleCreateWithoutUserInput!]
        connect: [ScheduleWhereUniqueInput!]
      }

      input ScheduleCreateWithoutUserInput {
        id: ID
        name: String
        summary: String
        url: String
        image: String
        rating: Float
      }

      type ScheduleEdge {
        node: Schedule!
        cursor: String!
      }

      enum ScheduleOrderByInput {
        id_ASC
        id_DESC
        name_ASC
        name_DESC
        summary_ASC
        summary_DESC
        url_ASC
        url_DESC
        image_ASC
        image_DESC
        rating_ASC
        rating_DESC
      }

      type SchedulePreviousValues {
        id: ID!
        name: String
        summary: String
        url: String
        image: String
        rating: Float
      }

      input ScheduleScalarWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        name: String
        name_not: String
        name_in: [String!]
        name_not_in: [String!]
        name_lt: String
        name_lte: String
        name_gt: String
        name_gte: String
        name_contains: String
        name_not_contains: String
        name_starts_with: String
        name_not_starts_with: String
        name_ends_with: String
        name_not_ends_with: String
        summary: String
        summary_not: String
        summary_in: [String!]
        summary_not_in: [String!]
        summary_lt: String
        summary_lte: String
        summary_gt: String
        summary_gte: String
        summary_contains: String
        summary_not_contains: String
        summary_starts_with: String
        summary_not_starts_with: String
        summary_ends_with: String
        summary_not_ends_with: String
        url: String
        url_not: String
        url_in: [String!]
        url_not_in: [String!]
        url_lt: String
        url_lte: String
        url_gt: String
        url_gte: String
        url_contains: String
        url_not_contains: String
        url_starts_with: String
        url_not_starts_with: String
        url_ends_with: String
        url_not_ends_with: String
        image: String
        image_not: String
        image_in: [String!]
        image_not_in: [String!]
        image_lt: String
        image_lte: String
        image_gt: String
        image_gte: String
        image_contains: String
        image_not_contains: String
        image_starts_with: String
        image_not_starts_with: String
        image_ends_with: String
        image_not_ends_with: String
        rating: Float
        rating_not: Float
        rating_in: [Float!]
        rating_not_in: [Float!]
        rating_lt: Float
        rating_lte: Float
        rating_gt: Float
        rating_gte: Float
        AND: [ScheduleScalarWhereInput!]
        OR: [ScheduleScalarWhereInput!]
        NOT: [ScheduleScalarWhereInput!]
      }

      type ScheduleSubscriptionPayload {
        mutation: MutationType!
        node: Schedule
        updatedFields: [String!]
        previousValues: SchedulePreviousValues
      }

      input ScheduleSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: ScheduleWhereInput
        AND: [ScheduleSubscriptionWhereInput!]
        OR: [ScheduleSubscriptionWhereInput!]
        NOT: [ScheduleSubscriptionWhereInput!]
      }

      input ScheduleUpdateInput {
        name: String
        summary: String
        url: String
        image: String
        rating: Float
        user: UserUpdateOneWithoutScheduleInput
      }

      input ScheduleUpdateManyDataInput {
        name: String
        summary: String
        url: String
        image: String
        rating: Float
      }

      input ScheduleUpdateManyMutationInput {
        name: String
        summary: String
        url: String
        image: String
        rating: Float
      }

      input ScheduleUpdateManyWithoutUserInput {
        create: [ScheduleCreateWithoutUserInput!]
        delete: [ScheduleWhereUniqueInput!]
        connect: [ScheduleWhereUniqueInput!]
        set: [ScheduleWhereUniqueInput!]
        disconnect: [ScheduleWhereUniqueInput!]
        update: [ScheduleUpdateWithWhereUniqueWithoutUserInput!]
        upsert: [ScheduleUpsertWithWhereUniqueWithoutUserInput!]
        deleteMany: [ScheduleScalarWhereInput!]
        updateMany: [ScheduleUpdateManyWithWhereNestedInput!]
      }

      input ScheduleUpdateManyWithWhereNestedInput {
        where: ScheduleScalarWhereInput!
        data: ScheduleUpdateManyDataInput!
      }

      input ScheduleUpdateWithoutUserDataInput {
        name: String
        summary: String
        url: String
        image: String
        rating: Float
      }

      input ScheduleUpdateWithWhereUniqueWithoutUserInput {
        where: ScheduleWhereUniqueInput!
        data: ScheduleUpdateWithoutUserDataInput!
      }

      input ScheduleUpsertWithWhereUniqueWithoutUserInput {
        where: ScheduleWhereUniqueInput!
        update: ScheduleUpdateWithoutUserDataInput!
        create: ScheduleCreateWithoutUserInput!
      }

      input ScheduleWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        name: String
        name_not: String
        name_in: [String!]
        name_not_in: [String!]
        name_lt: String
        name_lte: String
        name_gt: String
        name_gte: String
        name_contains: String
        name_not_contains: String
        name_starts_with: String
        name_not_starts_with: String
        name_ends_with: String
        name_not_ends_with: String
        summary: String
        summary_not: String
        summary_in: [String!]
        summary_not_in: [String!]
        summary_lt: String
        summary_lte: String
        summary_gt: String
        summary_gte: String
        summary_contains: String
        summary_not_contains: String
        summary_starts_with: String
        summary_not_starts_with: String
        summary_ends_with: String
        summary_not_ends_with: String
        url: String
        url_not: String
        url_in: [String!]
        url_not_in: [String!]
        url_lt: String
        url_lte: String
        url_gt: String
        url_gte: String
        url_contains: String
        url_not_contains: String
        url_starts_with: String
        url_not_starts_with: String
        url_ends_with: String
        url_not_ends_with: String
        image: String
        image_not: String
        image_in: [String!]
        image_not_in: [String!]
        image_lt: String
        image_lte: String
        image_gt: String
        image_gte: String
        image_contains: String
        image_not_contains: String
        image_starts_with: String
        image_not_starts_with: String
        image_ends_with: String
        image_not_ends_with: String
        rating: Float
        rating_not: Float
        rating_in: [Float!]
        rating_not_in: [Float!]
        rating_lt: Float
        rating_lte: Float
        rating_gt: Float
        rating_gte: Float
        user: UserWhereInput
        AND: [ScheduleWhereInput!]
        OR: [ScheduleWhereInput!]
        NOT: [ScheduleWhereInput!]
      }

      input ScheduleWhereUniqueInput {
        id: ID
      }

      type Subscription {
        schedule(
          where: ScheduleSubscriptionWhereInput
        ): ScheduleSubscriptionPayload
        user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
        watched(
          where: WatchedSubscriptionWhereInput
        ): WatchedSubscriptionPayload
      }

      type User {
        id: ID!
        name: String!
        email: String!
        password: String!
        schedule(
          where: ScheduleWhereInput
          orderBy: ScheduleOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Schedule!]
        watched(
          where: WatchedWhereInput
          orderBy: WatchedOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Watched!]
      }

      type UserConnection {
        pageInfo: PageInfo!
        edges: [UserEdge]!
        aggregate: AggregateUser!
      }

      input UserCreateInput {
        id: ID
        name: String!
        email: String!
        password: String!
        schedule: ScheduleCreateManyWithoutUserInput
        watched: WatchedCreateManyWithoutUserInput
      }

      input UserCreateOneWithoutScheduleInput {
        create: UserCreateWithoutScheduleInput
        connect: UserWhereUniqueInput
      }

      input UserCreateOneWithoutWatchedInput {
        create: UserCreateWithoutWatchedInput
        connect: UserWhereUniqueInput
      }

      input UserCreateWithoutScheduleInput {
        id: ID
        name: String!
        email: String!
        password: String!
        watched: WatchedCreateManyWithoutUserInput
      }

      input UserCreateWithoutWatchedInput {
        id: ID
        name: String!
        email: String!
        password: String!
        schedule: ScheduleCreateManyWithoutUserInput
      }

      type UserEdge {
        node: User!
        cursor: String!
      }

      enum UserOrderByInput {
        id_ASC
        id_DESC
        name_ASC
        name_DESC
        email_ASC
        email_DESC
        password_ASC
        password_DESC
      }

      type UserPreviousValues {
        id: ID!
        name: String!
        email: String!
        password: String!
      }

      type UserSubscriptionPayload {
        mutation: MutationType!
        node: User
        updatedFields: [String!]
        previousValues: UserPreviousValues
      }

      input UserSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: UserWhereInput
        AND: [UserSubscriptionWhereInput!]
        OR: [UserSubscriptionWhereInput!]
        NOT: [UserSubscriptionWhereInput!]
      }

      input UserUpdateInput {
        name: String
        email: String
        password: String
        schedule: ScheduleUpdateManyWithoutUserInput
        watched: WatchedUpdateManyWithoutUserInput
      }

      input UserUpdateManyMutationInput {
        name: String
        email: String
        password: String
      }

      input UserUpdateOneWithoutScheduleInput {
        create: UserCreateWithoutScheduleInput
        update: UserUpdateWithoutScheduleDataInput
        upsert: UserUpsertWithoutScheduleInput
        delete: Boolean
        disconnect: Boolean
        connect: UserWhereUniqueInput
      }

      input UserUpdateOneWithoutWatchedInput {
        create: UserCreateWithoutWatchedInput
        update: UserUpdateWithoutWatchedDataInput
        upsert: UserUpsertWithoutWatchedInput
        delete: Boolean
        disconnect: Boolean
        connect: UserWhereUniqueInput
      }

      input UserUpdateWithoutScheduleDataInput {
        name: String
        email: String
        password: String
        watched: WatchedUpdateManyWithoutUserInput
      }

      input UserUpdateWithoutWatchedDataInput {
        name: String
        email: String
        password: String
        schedule: ScheduleUpdateManyWithoutUserInput
      }

      input UserUpsertWithoutScheduleInput {
        update: UserUpdateWithoutScheduleDataInput!
        create: UserCreateWithoutScheduleInput!
      }

      input UserUpsertWithoutWatchedInput {
        update: UserUpdateWithoutWatchedDataInput!
        create: UserCreateWithoutWatchedInput!
      }

      input UserWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        name: String
        name_not: String
        name_in: [String!]
        name_not_in: [String!]
        name_lt: String
        name_lte: String
        name_gt: String
        name_gte: String
        name_contains: String
        name_not_contains: String
        name_starts_with: String
        name_not_starts_with: String
        name_ends_with: String
        name_not_ends_with: String
        email: String
        email_not: String
        email_in: [String!]
        email_not_in: [String!]
        email_lt: String
        email_lte: String
        email_gt: String
        email_gte: String
        email_contains: String
        email_not_contains: String
        email_starts_with: String
        email_not_starts_with: String
        email_ends_with: String
        email_not_ends_with: String
        password: String
        password_not: String
        password_in: [String!]
        password_not_in: [String!]
        password_lt: String
        password_lte: String
        password_gt: String
        password_gte: String
        password_contains: String
        password_not_contains: String
        password_starts_with: String
        password_not_starts_with: String
        password_ends_with: String
        password_not_ends_with: String
        schedule_every: ScheduleWhereInput
        schedule_some: ScheduleWhereInput
        schedule_none: ScheduleWhereInput
        watched_every: WatchedWhereInput
        watched_some: WatchedWhereInput
        watched_none: WatchedWhereInput
        AND: [UserWhereInput!]
        OR: [UserWhereInput!]
        NOT: [UserWhereInput!]
      }

      input UserWhereUniqueInput {
        id: ID
        email: String
      }

      type Watched {
        id: ID!
        name: String
        summary: String
        url: String
        image: String
        rating: Float
        user: User
        favorite: Boolean
        comment: String
      }

      type WatchedConnection {
        pageInfo: PageInfo!
        edges: [WatchedEdge]!
        aggregate: AggregateWatched!
      }

      input WatchedCreateInput {
        id: ID
        name: String
        summary: String
        url: String
        image: String
        rating: Float
        user: UserCreateOneWithoutWatchedInput
        favorite: Boolean
        comment: String
      }

      input WatchedCreateManyWithoutUserInput {
        create: [WatchedCreateWithoutUserInput!]
        connect: [WatchedWhereUniqueInput!]
      }

      input WatchedCreateWithoutUserInput {
        id: ID
        name: String
        summary: String
        url: String
        image: String
        rating: Float
        favorite: Boolean
        comment: String
      }

      type WatchedEdge {
        node: Watched!
        cursor: String!
      }

      enum WatchedOrderByInput {
        id_ASC
        id_DESC
        name_ASC
        name_DESC
        summary_ASC
        summary_DESC
        url_ASC
        url_DESC
        image_ASC
        image_DESC
        rating_ASC
        rating_DESC
        favorite_ASC
        favorite_DESC
        comment_ASC
        comment_DESC
      }

      type WatchedPreviousValues {
        id: ID!
        name: String
        summary: String
        url: String
        image: String
        rating: Float
        favorite: Boolean
        comment: String
      }

      input WatchedScalarWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        name: String
        name_not: String
        name_in: [String!]
        name_not_in: [String!]
        name_lt: String
        name_lte: String
        name_gt: String
        name_gte: String
        name_contains: String
        name_not_contains: String
        name_starts_with: String
        name_not_starts_with: String
        name_ends_with: String
        name_not_ends_with: String
        summary: String
        summary_not: String
        summary_in: [String!]
        summary_not_in: [String!]
        summary_lt: String
        summary_lte: String
        summary_gt: String
        summary_gte: String
        summary_contains: String
        summary_not_contains: String
        summary_starts_with: String
        summary_not_starts_with: String
        summary_ends_with: String
        summary_not_ends_with: String
        url: String
        url_not: String
        url_in: [String!]
        url_not_in: [String!]
        url_lt: String
        url_lte: String
        url_gt: String
        url_gte: String
        url_contains: String
        url_not_contains: String
        url_starts_with: String
        url_not_starts_with: String
        url_ends_with: String
        url_not_ends_with: String
        image: String
        image_not: String
        image_in: [String!]
        image_not_in: [String!]
        image_lt: String
        image_lte: String
        image_gt: String
        image_gte: String
        image_contains: String
        image_not_contains: String
        image_starts_with: String
        image_not_starts_with: String
        image_ends_with: String
        image_not_ends_with: String
        rating: Float
        rating_not: Float
        rating_in: [Float!]
        rating_not_in: [Float!]
        rating_lt: Float
        rating_lte: Float
        rating_gt: Float
        rating_gte: Float
        favorite: Boolean
        favorite_not: Boolean
        comment: String
        comment_not: String
        comment_in: [String!]
        comment_not_in: [String!]
        comment_lt: String
        comment_lte: String
        comment_gt: String
        comment_gte: String
        comment_contains: String
        comment_not_contains: String
        comment_starts_with: String
        comment_not_starts_with: String
        comment_ends_with: String
        comment_not_ends_with: String
        AND: [WatchedScalarWhereInput!]
        OR: [WatchedScalarWhereInput!]
        NOT: [WatchedScalarWhereInput!]
      }

      type WatchedSubscriptionPayload {
        mutation: MutationType!
        node: Watched
        updatedFields: [String!]
        previousValues: WatchedPreviousValues
      }

      input WatchedSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: WatchedWhereInput
        AND: [WatchedSubscriptionWhereInput!]
        OR: [WatchedSubscriptionWhereInput!]
        NOT: [WatchedSubscriptionWhereInput!]
      }

      input WatchedUpdateInput {
        name: String
        summary: String
        url: String
        image: String
        rating: Float
        user: UserUpdateOneWithoutWatchedInput
        favorite: Boolean
        comment: String
      }

      input WatchedUpdateManyDataInput {
        name: String
        summary: String
        url: String
        image: String
        rating: Float
        favorite: Boolean
        comment: String
      }

      input WatchedUpdateManyMutationInput {
        name: String
        summary: String
        url: String
        image: String
        rating: Float
        favorite: Boolean
        comment: String
      }

      input WatchedUpdateManyWithoutUserInput {
        create: [WatchedCreateWithoutUserInput!]
        delete: [WatchedWhereUniqueInput!]
        connect: [WatchedWhereUniqueInput!]
        set: [WatchedWhereUniqueInput!]
        disconnect: [WatchedWhereUniqueInput!]
        update: [WatchedUpdateWithWhereUniqueWithoutUserInput!]
        upsert: [WatchedUpsertWithWhereUniqueWithoutUserInput!]
        deleteMany: [WatchedScalarWhereInput!]
        updateMany: [WatchedUpdateManyWithWhereNestedInput!]
      }

      input WatchedUpdateManyWithWhereNestedInput {
        where: WatchedScalarWhereInput!
        data: WatchedUpdateManyDataInput!
      }

      input WatchedUpdateWithoutUserDataInput {
        name: String
        summary: String
        url: String
        image: String
        rating: Float
        favorite: Boolean
        comment: String
      }

      input WatchedUpdateWithWhereUniqueWithoutUserInput {
        where: WatchedWhereUniqueInput!
        data: WatchedUpdateWithoutUserDataInput!
      }

      input WatchedUpsertWithWhereUniqueWithoutUserInput {
        where: WatchedWhereUniqueInput!
        update: WatchedUpdateWithoutUserDataInput!
        create: WatchedCreateWithoutUserInput!
      }

      input WatchedWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        name: String
        name_not: String
        name_in: [String!]
        name_not_in: [String!]
        name_lt: String
        name_lte: String
        name_gt: String
        name_gte: String
        name_contains: String
        name_not_contains: String
        name_starts_with: String
        name_not_starts_with: String
        name_ends_with: String
        name_not_ends_with: String
        summary: String
        summary_not: String
        summary_in: [String!]
        summary_not_in: [String!]
        summary_lt: String
        summary_lte: String
        summary_gt: String
        summary_gte: String
        summary_contains: String
        summary_not_contains: String
        summary_starts_with: String
        summary_not_starts_with: String
        summary_ends_with: String
        summary_not_ends_with: String
        url: String
        url_not: String
        url_in: [String!]
        url_not_in: [String!]
        url_lt: String
        url_lte: String
        url_gt: String
        url_gte: String
        url_contains: String
        url_not_contains: String
        url_starts_with: String
        url_not_starts_with: String
        url_ends_with: String
        url_not_ends_with: String
        image: String
        image_not: String
        image_in: [String!]
        image_not_in: [String!]
        image_lt: String
        image_lte: String
        image_gt: String
        image_gte: String
        image_contains: String
        image_not_contains: String
        image_starts_with: String
        image_not_starts_with: String
        image_ends_with: String
        image_not_ends_with: String
        rating: Float
        rating_not: Float
        rating_in: [Float!]
        rating_not_in: [Float!]
        rating_lt: Float
        rating_lte: Float
        rating_gt: Float
        rating_gte: Float
        user: UserWhereInput
        favorite: Boolean
        favorite_not: Boolean
        comment: String
        comment_not: String
        comment_in: [String!]
        comment_not_in: [String!]
        comment_lt: String
        comment_lte: String
        comment_gt: String
        comment_gte: String
        comment_contains: String
        comment_not_contains: String
        comment_starts_with: String
        comment_not_starts_with: String
        comment_ends_with: String
        comment_not_ends_with: String
        AND: [WatchedWhereInput!]
        OR: [WatchedWhereInput!]
        NOT: [WatchedWhereInput!]
      }

      input WatchedWhereUniqueInput {
        id: ID
      }
    `,
};
